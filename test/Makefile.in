# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only
# Copyright (c) 2017-2023 Brett Sheffield <bacs@librecast.net>

TESTRUNNER := @TESTRUNNER@
CFLAGS := -I../src -I ../include $(CFLAGS)
CPPFLAGS := @CPPFLAGS@
TEST_SOURCES := $(wildcard ????-????.c)
TEST_PROGS ?= $(TEST_SOURCES:.c=.test)
LDFLAGS := -L../src $(LDFLAGS)
LDLIBS := @LIBS@ @LIBDL@ @LIBSODIUM@
OBJS := test.o log.o misc.o $(filter-out $(NOTOBJS), $(wildcard ../src/*.o))
LASTLOG := lastlog.log
LOGFILE := $(shell mktemp "testlog-XXXXXX")
ANSI_RESET = "\033[0m"
ANSI_BOLD := "\033[0m\033[2m"
ANSI_GREEN = "\033[32m"
ANSI_RED = "\033[31m"
ANSI_YELLOW = "\033[33m"
ANSI_WHITE = "\033[37m"
PASS = $(ANSI_RESET)$(ANSI_GREEN)\ OK$(ANSI_RESET)
WARN = $(ANSI_RESET)$(ANSI_YELLOW)WARN$(ANSI_RESET)
FAIL = $(ANSI_RESET)$(ANSI_RED)FAIL$(ANSI_RESET)
UNKN = $(ANSI_RESET)$(ANSI_WHITE)????$(ANSI_RESET)
VALGRIND = valgrind --leak-check=full --max-stackframe=20480160 --error-exitcode=2 --errors-for-leak-kinds=all --track-origins=yes

define runtest =
@printf $(ANSI_BOLD)
@echo -n " $(1:.test=) "
@$(MEMCHECK) ./$(1) 2>>$(LOGFILE)
ret=$$?
@if [ $$ret -eq 0 ]; then \
	printf $(PASS); echo; \
elif [ $$ret -eq 1 ]; then \
	printf $(WARN); echo; \
elif [ $$ret -eq 2 ]; then \
	printf $(FAIL); echo; \
	fails=$$(( fails + 1 )) ; \
else \
	printf $(UNKN); echo; \
	fails=$$(( fails + 1 )) ; \
fi
$(eval tests_run=$(shell echo $$(($(tests_run)+1))))

endef

.PHONY: test clean speedtest

test: $(TESTRUNNER)

speedtest.00: speedtest.00.o $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LDLIBS)

speedtest: speedtest.00
	./speedtest.00 32768 1024 1000
	$(RM) gmon.out

%.test: %.c $(OBJS)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -o $@ $< $(OBJS) $(LDLIBS)

lctest: $(TEST_PROGS)
	lctest -b $^

memcheck:
	MEMCHECK="$(VALGRIND)" $(MAKE) test

memcheck/%:
	MEMCHECK="$(VALGRIND)" $(MAKE) test/$(@F)

# if $(@F) is a directory, run tests in that directory
test/%:
	@if [ -d "$(@F)" ]; then
		$(eval TEST_PROGS=$(notdir $(wildcard $(@F)/*.test)))
		TEST_PROGS="$(TEST_PROGS)" $(MAKE) maketest
	else
		$(eval TEST_PROGS=0000-$(@F).test)
		TEST_PROGS="$(TEST_PROGS)" $(MAKE) maketest
	fi

.ONESHELL: maketest

maketest: $(TEST_PROGS)
	@fails=0
	$(foreach x,$^,$(call runtest,$(x)))
	ln -sf $(LOGFILE) $(LASTLOG)
	@echo -e "\n$(TIMESTAMP) - tests done" >> $(LOGFILE)
	@echo -e "$(tests_run) tests run\nlogfile: $(LOGFILE)\n"
	@if [ $$fails -gt 0 ]; then \
		echo ", $$fails tests failed"; \
		/bin/false;
	else
		echo
	fi

clean:
	$(RM) *.o *.test testlog-?????? $(LASTLOG)
	$(RM) speedtest.00

realclean: clean
	$(RM) lsdb-test-?????? ????-????.test.valgrind
	$(RM) -r ????-????.tmp.* *core*
	$(RM) ????-????.*.tmp*
	$(RM) gmon.out
	$(RM) Makefile
